-----
### 프린터 예제 4 - yield 도입
-----
```java
while (!Thread.interrupted()) {
    if (jobQueue.isEmpty()) {
        continue;
    }
    ...
}
```
1. 인터럽트가 발생하기 전까지 계속 인터럽트의 상태를 체크하고 또 jobQueue의 상태를 확인
   - 즉, 계속해서 CPU에서 이 로직을 계속 반복해서 수행
   - 즉, CPU 자원을 많이 사용하게 됨

2. 현재 작동하는 스레드가 아주 많다고 가정
   - 인터럽트도 걸리지 않고, jobQueue도 비어있는데, 이런 체크 로직에 CPU 로직을 많이 사용하게 되면, 정작 필요한 스레드들의 효율이 상대적으로 떨어질 수 있음
   - 다른 스레드들을 더 많이 실행해서 jobQueue에 필요한 작업을 빠르게 만들어 넣어주는게 더 효율적
```java
while (!Thread.interrupted()) {
    if (jobQueue.isEmpty()) {
        Thread.yield(); // 추가
        continue;
    }
    ...
}
```

3. MyPrinterV4
```java
package thread.control.printer;

import java.util.Queue;
import java.util.Scanner;
import java.util.concurrent.ConcurrentLinkedQueue;

import static thread.util.MyLogger.log;

public class MyPrinterV4 {
    public static void main(String[] args) {
        Printer printer = new Printer();
        Thread printerThread = new Thread(printer, "printer");

        printerThread.start();

        Scanner userInput = new Scanner(System.in);
        while (true) {
            log("프린터할 문서를 입력하세요. 종료(q) : ");
            String input = userInput.nextLine();

            if(input.equals("q")) {
                printerThread.interrupt();
                break;
            }

            printer.addJob(input);
        }
    }

    static class Printer implements Runnable {
        Queue<String> jobQueue = new ConcurrentLinkedQueue<>();

        @Override
        public void run() {
            while (!Thread.interrupted()) {
                if (jobQueue.isEmpty()) {
                    Thread.yield();
                    continue;
                }

                try {
                    String job = jobQueue.poll();
                    log("출력 시작 : " + job + ", 대기 문서 : " + jobQueue);
                    Thread.sleep(3000);
                    log("출력 완료");
                } catch (InterruptedException e) {
                    log("인터럽트 발생!");
                    break;
                }
            }

            log("프린터 종료");
        }

        public void addJob(String input) {
            jobQueue.offer(input);
        }
    }
}
```
